

./view/Input/textarea.py
multiline text area. NOT a rich text editor. auto wrap as text gets longer than
bounds

./view/Input/button.py
button input widget. allows the user to execute a defined action on
click. is configurable to either show text, show an image, or both. also
manages animation states.

./view/Input/input.py
base input widget class. responsible for defining abstract methods as well as
initializing any common data types between the various types of derived
input widgets.

./view/Input/text.py
root class for all text handling widgets. holds the text string and has
methods that facilitate data access for all methods.

./view/Input/radio.py
radio button widget. bound to a raidogroup parent. is essentially a 'bucket'
for a boolean value.

./view/Input/textfield.py
single line text field. has a configurable height and width.

./view/Input/radiogroup.py
grouping class for a collection of radio widgets. has references to all of
the related radio buttons.

./view/Input/checkbox.py
checkbox input widget. stores a boolean value that is displaed via a
checked/not checked box.

./view/Layout/vstack.py
the 'column' class. lays out its children vertically in a view. will wrap
either left or right if it is not configured to truncate. scrolling is also
an option.

./view/Layout/layout.py
root layout widget. holds all of the information needed for subclasses to
function properly irrespective of specific implementation details. also
handles things like resize and visibility toggling.

./view/Layout/hstack.py
the 'row' class. creates a view that arranges children horizontally within
it's bounds. can auto wrap or truncate if needed. scrolling is also an
option.

./view/Layout/page.py
'lowest level' subclass layout widget that will be used more than once. is
a root container for a specific section of content for the application. 'page'
seemed an appropriate name.

./view/Layout/gridview.py
wrapper for the tkinter grid layout system that allows for simpler definiton
of how the elements in a grid should work. takes in a list of children
and specification of a row an column number.

./view/Layout/view.py
generic view/frame class. general purpose in nature.

./view/Style/style.py
class to encapsulate the color config data. will take a color scheme as input
and populate the values based on what is in the file. will likely utilize
something close to the itermcolor format because it is well defined

./view/Widgets/tablecolumn.py
column class for table views. is essentally a series of indices to rows and the
headers for each column.

./view/Widgets/widget.py
base class for specialized widgets.

./view/Widgets/message.py
read-only text area that can show messages to the user as needed. can color
text as well.

./view/Widgets/tooltip.py
on hover/on click tooltips for the user. can be configured to show a message
or even link to external documentation.

./view/Widgets/modal.py
widget that creates a modal effect, preventing the user from taking any
other action until the modal view has been dealt with.

./view/Widgets/table.py
parent class for table views contains children rows and columns

./view/Widgets/tablerow.py
table row view that is a part of a table. has indices to appropriate columns
and cells can have other widgets embedded, though it will usually be text

./view/Widgets/dropdown.py
widget that 'floats' can can be placed anywhere in relation to another widget
with contents